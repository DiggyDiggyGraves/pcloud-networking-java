apply plugin: 'com.jfrog.bintray'
apply from: rootProject.file('publishing.gradle')

version = getPublishProperty('versionName')

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        failOnError = true
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar) {
    if (project.hasProperty("android")) {
        dependsOn "javadoc"
        from javadoc.destinationDir
    }
    classifier = 'javadoc'

}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def bintrayUser = properties.getProperty("bintray.user")
def bintrayKey = properties.getProperty("bintray.apikey")

if (bintrayUser == null) {
    bintrayUser = System.getenv("PCLOUD_BINTRAY_USER")
}

if (bintrayKey == null) {
    bintrayKey = System.getenv("PCLOUD_BINTRAY_KEY")
}

if (bintrayUser == null  || bintrayKey == null) {
    throw new GradleException("Missing bintray credentials.")
}

bintray {
    user = bintrayUser
    key = bintrayKey
    override = true
    configurations = ['archives']
    pkg {
        repo = getPublishProperty('libraryName')
        name = getPublishProperty('bintrayPackage')
        desc = getPublishProperty('description')
        websiteUrl = getPublishProperty('siteUrl')
        vcsUrl = getPublishProperty('vcsUrl')
        licenses = getProperty('allLicenses')
        userOrg = 'pcloud'
        publish = true
        publicDownloadNumbers = true
        version {
            desc = getProperty('description')
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

if (project.hasProperty("android")) {
    afterEvaluate {
        javadoc.classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompile.classpath.files
        })
    }
}
